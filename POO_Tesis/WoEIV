#import so
import traceback
import pandas as pd
import numpy as np
import pandas.core.algorithms as algos
from pandas import Series
import scipy.stats.stats as stats
import re
import traceback
import string

class WoE_IV:
    def __init__(self, namebase):
        self.dataset = pd.read_csv("./dataset/"+namebase)#lectura del archivo que contiene el csv
        self.namebase = namebase
        #self.dataset['salida'] = self.dataset['salida'] - 1
        self.buenos = int(self.dataset[self.dataset['salida'] == 0]['salida'].value_counts())
        self.malos  = int(self.dataset[self.dataset['salida'] == 1]['salida'].value_counts())
        self.columnas = self.dataset.columns
        self.max_bin = 20
        self.force_bin = 3
        self.table_woe_iv = pd.DataFrame(columns=['agrupacion', 'grupo', 'Conteo', 'Dst_Conteo', 'buenos', 'Dst_Conteo_Buenos', 'malos', 'Dst_Conteo_Malos', 'woe', 'iv'])

    def EncabezadoDataSet(self):
        print(self.dataset.head())

    def InfoDataSet(self):
        print(self.dataset.info())

    def ContarClases(self):
        print(self.dataset["salida"].value_counts())

    def Target(self):
        print(self.dataset.columns)

    def Function_WoE_IV(self):
        for column in self.columnas:
            grupo = self.dataset.groupby(column)
            diccionario_grupo = dict(self.dataset[column].value_counts())
            suma_buenos,suma_malos = self.ContarBuenosMalos(diccionario_grupo, column)
            indice = 0
            for el in diccionario_grupo:
                good_bad = dict(self.dataset[self.dataset[column] == el]['salida'].value_counts())
                if len(good_bad) == 1:
                    good_bad = self.Good_Bad(good_bad)
                dst_good = good_bad[1]/suma_buenos
                dst_bad = good_bad[0]/suma_malos
                woe = np.log(dst_good/dst_bad)
                renglon = pd.DataFrame({'agrupacion':column,'grupo':el,'Conteo': diccionario_grupo[el],'Dst_Conteo': diccionario_grupo[el]/sum(diccionario_grupo.values()),'buenos': good_bad[1],'Dst_Conteo_Buenos': dst_good,'malos':good_bad[0],'Dst_Conteo_Malos': dst_bad,'woe':woe,'iv':(dst_good - dst_bad)*woe}, index={indice})
                self.table_woe_iv = pd.concat([self.table_woe_iv, renglon], ignore_index=True)
                indice = indice + 1
                #self.table_woe_iv = self.table_woe_iv.append({'agrupacion':column,'grupo':el,'Conteo': diccionario_grupo[el],'Dst_Conteo': diccionario_grupo[el]/sum(diccionario_grupo.values()),'buenos': good_bad[0],'Dst_Conteo_Buenos': dst_good,'malos':good_bad[1],'Dst_Conteo_Malos': dst_bad,'woe':woe,'iv':(dst_good - dst_bad)*woe}, ignore_index=True)

        print("Nuevo DataFrame:    \n", self.table_woe_iv)

        self.table_woe_iv.to_csv("./exportDataFrame/tabla_woe_iv_"+ self.namebase+".csv")

    def Good_Bad(self,good_bad):
        flag_g = False
        flag_b = False
        if len(good_bad) == 1:
            for gb in good_bad:
                if gb == 1:
                    flag_b = True
                else:
                    flag_g = True

        if flag_b == True:
            good_bad[0] = 0
        else:
            good_bad[1] = 0

        return good_bad


    def ContarBuenosMalos(self, diccionario_grupo, column):
        suma_buenos = 0
        suma_malos  = 0
        #print("Diccionario Grupo: \n",diccionario_grupo)
        for el in diccionario_grupo:
            good_bad = dict(self.dataset[self.dataset[column] == el]['salida'].value_counts())
            #print("Buenos_Malos: \n", good_bad)
            for db in good_bad:
                if db == 1:
                    suma_buenos += good_bad[db]
                else:
                    suma_malos += good_bad[db]

        #print("Buenos:  ", suma_buenos, "   Malos:  ",suma_malos)
        return {suma_buenos, suma_malos}

    def iv_woe(self,data, target, bins, show_woe=False):
        #Empty Dataframe
        newDF,woeDF = pd.DataFrame(), pd.DataFrame()

        #Extract Column Names
        cols = data.columns

        #Run WOE and IV on all the independent variables
        for ivars in cols[~cols.isin([target])]:
            if (data[ivars].dtype.kind in 'bifc') and (len(np.unique(data[ivars]))>10):
                binned_x = pd.qcut(data[ivars], bins,  duplicates='drop')
                d0 = pd.DataFrame({'x': binned_x, 'y': data[target]})
            else:
                d0 = pd.DataFrame({'x': data[ivars], 'y': data[target]})
            d0 = d0.astype({"x": str})
            d = d0.groupby("x", as_index=False, dropna=False).agg({"y": ["count", "sum"]})
            d.columns = ['Cutoff', 'N', 'Events']
            d['% of Events'] = np.maximum(d['Events'], 0.5) / d['Events'].sum()
            d['Non-Events'] = d['N'] - d['Events']
            d['% of Non-Events'] = np.maximum(d['Non-Events'], 0.5) / d['Non-Events'].sum()
            d['WoE'] = np.log(d['% of Non-Events']/d['% of Events'])
            d['IV'] = d['WoE'] * (d['% of Non-Events']-d['% of Events'])
            d.insert(loc=0, column='Variable', value=ivars)
            print("Information value of " + ivars + " is " + str(round(d['IV'].sum(),6)))
            temp =pd.DataFrame({"Variable" : [ivars], "IV" : [d['IV'].sum()]}, columns = ["Variable", "IV"])
            newDF=pd.concat([newDF,temp], axis=0)
            woeDF=pd.concat([woeDF,d], axis=0)

            #Show WOE Table
            if show_woe == True:
                print(d)
        return newDF, woeDF



woe_iv = WoE_IV('eiz000_v13.txt')
woe_iv.EncabezadoDataSet()
woe_iv.InfoDataSet()
woe_iv.ContarClases()
woe_iv.Target()

#woe_iv.Function_WoE_IV()


bins = 12
woe_iv = WoE_IV('eiz000_v13.txt')
iv, woe = woe_iv.iv_woe(data = woe_iv.dataset, target = 'salida', bins = 12, show_woe = True)
print(iv)
print(woe)
iv.to_csv("./exportDataFrame/tabla_iv_"+ str(bins) +".csv")
woe.to_csv("./exportDataFrame/tabla_woe_"+ str(bins) +".csv")
